

<cart-items-component
  class="cart-items-component"
  data-section-id="{{ section.id }}"
>
  <div class="section-background color-{{ section.settings.color_scheme }}"></div>
  <div
    class="section color-{{ section.settings.color_scheme }} section--{{ section.settings.section_width }}"
  >
    <div
      class="cart-page spacing-style{% if cart.empty? %} cart-page--empty{% endif %}"
      style="{% render 'spacing-style', settings: section.settings %}"
    >
      <div class="cart-page__title">
        {%- content_for 'block', id: 'cart-page-title', type: '_cart-title' %}
      </div>

      <div class="cart-page__items">
        {%- content_for 'block', id: 'cart-page-items', type: '_cart-products' %}
      </div>

      {%- unless cart.empty? -%}
        <div class="cart-page__summary">
          <div class="js-contents">
            <div>
              {%- if cart.cart_level_discount_applications.size > 0 -%}
                <ul class="discounts list-unstyled" role="list" aria-label="{{ 'content.discounts' | t }}">
                  {%- for discount in cart.cart_level_discount_applications -%}
                    <li class="discounts__discount discounts__discount--position">
                      {{- 'icon-discount.svg' | inline_asset_content -}}
                      {{ discount.title | escape }}
                      (-{{ discount.total_allocated_amount | money }})
                    </li>
                  {%- endfor -%}
                </ul>
              {%- endif -%}
            </div>

            <div class="totals">
              <h2 class="totals__total">{{ 'content.cart_estimated_total' | t }}</h2>
              <p class="totals__total-value">{{ cart.total_price | money_with_currency }}</p>
            </div>

            <div class="sbtc-checkout-section" style="margin-top: 16px;">
              <button 
                id="sbtc-checkout-btn" 
                class="button button--secondary button--full-width"
                {% if cart == empty %}disabled{% endif %}
                style="margin-bottom: 8px;"
              >
                Checkout with sBTC
              </button>
            </div>

            <div class="tax-note caption-large rte">
              {% render 'tax-info', has_discounts_enabled: cart.cart_level_discount_applications.size > 0 %}
            </div>
          </div>
        </div>
      {%- endunless -%}

      <div id="cart-errors"></div>

      <div class="cart-page__more-blocks">
        {%- content_for 'blocks' -%}
      </div>
    </div>
  </div>
</cart-items-component>

<script>
  // sBTC Checkout button functionality with DOM replacement detection
  (function() {
    let sbtcButtonState = {
      isInitialized: false,
      isProcessing: false,
      lastClickTime: 0,
      clickDebounceDelay: 500,
      observer: null
    }

    function initSbtcCheckoutButton() {
      const sbtcCheckoutBtn = document.getElementById('sbtc-checkout-btn')
      
      if (!sbtcCheckoutBtn) {
        console.log('sBTC button not found, will retry on DOM changes')
        return false
      }
      
      if (sbtcCheckoutBtn.hasAttribute('data-sbtc-initialized')) {
        return true
      }
      
      sbtcCheckoutBtn.addEventListener('click', handleSbtcCheckoutClick)
      sbtcCheckoutBtn.setAttribute('data-sbtc-initialized', 'true')
      
      sbtcButtonState.isInitialized = true
      return true
    }

    function setSbtcActive(isActive) {
      const cartPage = document.querySelector('.cart-page')
      if (!cartPage) return
      if (isActive) {
        cartPage.classList.add('sbtc-active')
      } else {
        cartPage.classList.remove('sbtc-active')
      }
    }

    function handleSbtcCheckoutClick(event) {
      event.preventDefault()
      
      const now = Date.now()
      
      if (now - sbtcButtonState.lastClickTime < sbtcButtonState.clickDebounceDelay) {
        return
      }
      
      sbtcButtonState.lastClickTime = now
      
      if (sbtcButtonState.isProcessing) {
        return
      }
      
      sbtcButtonState.isProcessing = true
      
      const btn = event.target
      const originalText = btn.textContent
      btn.disabled = true
      btn.textContent = 'Loading...'
      setSbtcActive(true)
      
      attemptSbtcCheckout(0, () => {
        sbtcButtonState.isProcessing = false
        btn.disabled = false
        btn.textContent = originalText
      }, () => {
        // On final failure
        setSbtcActive(false)
      })
    }

    function attemptSbtcCheckout(retryCount, resetCallback, onFinalFailure) {
      const maxRetries = 8
      const baseDelay = 200
      const retryDelay = retryCount === 0 ? 0 : Math.min(baseDelay * Math.pow(1.5, retryCount), 2000)
      
      setTimeout(() => {
        if (retryCount > 0 && retryCount % 3 === 0) {
          window.dispatchEvent(new CustomEvent('sbtc:request-functions'))
        }
        
        if (window.sbtcCheckoutFunctions && window.sbtcCheckoutFunctions.showSbtcCheckout) {
          resetCallback()
          window.sbtcCheckoutFunctions.showSbtcCheckout()
        } else if (window.showSbtcCheckout && typeof window.showSbtcCheckout === 'function') {
          resetCallback()
          window.showSbtcCheckout()
        } else if (window.sbtcCheckoutReady && retryCount > 2) {
          window.dispatchEvent(new CustomEvent('sbtc:request-functions'))
          if (retryCount < maxRetries) {
            attemptSbtcCheckout(retryCount + 1, resetCallback, onFinalFailure)
          } else {
            resetCallback()
            alert('sBTC checkout had an error. Please refresh the page and try again.')
            if (typeof onFinalFailure === 'function') onFinalFailure()
          }
        } else if (retryCount < maxRetries) {
          attemptSbtcCheckout(retryCount + 1, resetCallback, onFinalFailure)
        } else {
          resetCallback()
          alert('sBTC checkout is temporarily unavailable. Please refresh the page and try again.')
          if (typeof onFinalFailure === 'function') onFinalFailure()
        }
      }, retryDelay)
    }

    function setupDOMObserver() {
      if (sbtcButtonState.observer) {
        sbtcButtonState.observer.disconnect()
      }

      const cartFooter = document.querySelector('.cart-page__summary')
      if (!cartFooter) {
        return
      }

      sbtcButtonState.observer = new MutationObserver((mutations) => {
        let shouldReinit = false

        mutations.forEach((mutation) => {
          if (mutation.type === 'childList') {
            const buttonExists = document.getElementById('sbtc-checkout-btn')
            if (!buttonExists || !buttonExists.hasAttribute('data-sbtc-initialized')) {
              shouldReinit = true
            }
          }
        })

        if (shouldReinit && !sbtcButtonState.isProcessing) {
          clearTimeout(window.sbtcReinitTimer)
          window.sbtcReinitTimer = setTimeout(() => {
            initSbtcCheckoutButton()
          }, 50)
        }
      })

      sbtcButtonState.observer.observe(cartFooter, {
        childList: true,
        subtree: true
      })
    }

    document.addEventListener('DOMContentLoaded', () => {
      initSbtcCheckoutButton()
      setupDOMObserver()
    })

    if (typeof subscribe === 'function' && window.PUB_SUB_EVENTS) {
      subscribe(window.PUB_SUB_EVENTS.cartUpdate, () => {
        clearTimeout(window.sbtcReinitTimer)
        window.sbtcReinitTimer = setTimeout(() => {
          if (!sbtcButtonState.isProcessing) {
            initSbtcCheckoutButton()
          }
        }, 100)
      })
    }

    document.addEventListener('cart:updated', () => {
      clearTimeout(window.sbtcReinitTimer)
      window.sbtcReinitTimer = setTimeout(() => {
        if (!sbtcButtonState.isProcessing) {
          initSbtcCheckoutButton()
        }
      }, 100)
    })

    window.addEventListener('sbtc:cart-restored', () => {
      setTimeout(() => {
        sbtcButtonState.isProcessing = false
        initSbtcCheckoutButton()
        setupDOMObserver()
        setSbtcActive(false)
      }, 100)
    })

    // Close/back hooks from sBTC flow
    window.addEventListener('sbtc:close', () => setSbtcActive(false))
    window.addEventListener('sbtc:back', () => setSbtcActive(false))
    window.addEventListener('sbtc:checkout:closed', () => setSbtcActive(false))

    window.sbtcButtonState = sbtcButtonState
  })()
</script>

{% stylesheet %}
  .cart-page {
    --cart-font-size--2xs: var(--font-size--2xs);
    --cart-font-size--xs: var(--font-size--xs);
    --cart-font-size--sm: var(--font-size--sm);
    --cart-font-size--md: var(--font-size--md);
    --cart-font-size--2xl: var(--font-size--2xl);

    display: grid;
    grid-template-columns: 1fr;
    gap: 0 var(--padding-5xl);
  }

  .cart-page--empty {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
  }

  .cart-page--empty .cart-page__title,
  .cart-page--empty .cart-page__more-blocks {
    margin-top: var(--margin-6xl);
  }

  .cart-page__more-blocks {
    width: 100%;
  }

  .cart-page--empty .cart-title {
    text-align: center;
  }

  .cart-page__main {
    grid-column: 1;
  }

  .cart-page__summary {
    padding-top: var(--padding-xl);
  }

  /* Hide cart items and totals/summary when sBTC flow is active */
  .cart-page.sbtc-active .cart-page__items,
  .cart-page.sbtc-active .cart-page__summary {
    display: none;
  }

  @media screen and (min-width: 750px) {
    .cart-page {
      grid-template-columns: 1fr min(50vw, var(--sidebar-width));
      grid-template-rows: min-content min-content 1fr;
    }

    .cart-page__summary {
      display: grid;
      height: 100%;
      grid-column: 2;
      grid-row: 1 / -1;
      align-self: stretch;
      grid-template-rows: subgrid;
      padding-top: 0;

      /* needed to support blurred effect from hero section */
      position: relative;
    }

    .section--page-width .cart-page:has(.cart__container--extend) {
      grid-column: 2 / 4;
      grid-template-columns: 1fr minmax(
          var(--sidebar-width),
          calc((100vw - var(--page-width)) / 2 + var(--sidebar-width))
        );
    }

    .cart__container--extend {
      height: 100%;
    }
  }

  @media screen and (min-width: 1400px) {
    .cart-page {
      grid-template-columns: 1fr var(--sidebar-width);
    }
  }
{% endstylesheet %}

{% schema %}
{
  "name": "t:names.cart",
  "disabled_on": {
    "groups": ["header", "footer"]
  },
  "blocks": [
    {
      "type": "@theme"
    },
    {
      "type": "@app"
    },
    {
      "type": "text"
    },
    {
      "type": "icon"
    },
    {
      "type": "image"
    },
    {
      "type": "button"
    },
    {
      "type": "video"
    },
    {
      "type": "group"
    },
    {
      "type": "spacer"
    }
  ],
  "settings": [
    {
      "type": "select",
      "id": "section_width",
      "label": "t:settings.width",
      "options": [
        {
          "value": "page-width",
          "label": "t:options.page"
        },
        {
          "value": "full-width",
          "label": "t:options.full"
        }
      ],
      "default": "page-width"
    },
    {
      "type": "color_scheme",
      "id": "color_scheme",
      "label": "t:settings.color_scheme",
      "default": "scheme-1"
    },
    {
      "type": "header",
      "content": "t:content.padding"
    },
    {
      "type": "range",
      "id": "padding-block-start",
      "label": "t:settings.top",
      "min": 0,
      "max": 100,
      "step": 1,
      "unit": "px",
      "default": 0
    },
    {
      "type": "range",
      "id": "padding-block-end",
      "label": "t:settings.bottom",
      "min": 0,
      "max": 100,
      "step": 1,
      "unit": "px",
      "default": 0
    }
  ]
}
{% endschema %}
